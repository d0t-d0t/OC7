name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  SERVICE_NAME: ml-pipeline

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx

    
    - name: Run tests
      run: |
        python -m unittest -v
    
    #- name: Lint code
     # run: |
      #  python -m black . --check
       # python -m pylint api/ app.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Update and restart on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/
          


          # Install nginx, git and venv
          sudo apt update
          sudo apt install -y nginx git python3-venv python3-pip

          # Clone repo if it doesn't exist, otherwise update
          # Check if we need to clone or update
          if [ ! -d "$SERVICE_NAME/.git" ]; then
            echo "Cloning repository for the first time..."
            # Remove directory if it exists but isn't a git repo
            if [ -d "$SERVICE_NAME" ]; then
              rm -rf $SERVICE_NAME
            fi
            git clone https://github.com/d0td0t/OC7.git $SERVICE_NAME
            cd $SERVICE_NAME
          else
            echo "Updating existing repository..."
            cd $SERVICE_NAME
            git fetch origin
            git reset --hard origin/main
          fi
          

          # Stop existing services
          sudo systemctl stop ml-api streamlit-app || true

          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          # Install/update dependencies
          pip install --upgrade pip

          # Install/update dependencies - make sure we're in the right directory
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "WARNING: requirements.txt not found at $(pwd)/requirements.txt"
          fi
          
           # Deploy systemd service files - adjust path if needed
          if [ -f "Deployment/streamlit-app.service" ]; then
            sudo cp Deployment/streamlit-app.service /etc/systemd/system/
            echo "Deployed streamlit-app.service"
          elif [ -f "streamlit-app.service" ]; then
            sudo cp streamlit-app.service /etc/systemd/system/
            echo "Deployed streamlit-app.service from root"
          else
            echo "WARNING: streamlit-app.service not found"
          fi
          
          if [ -f "Deployment/ml-api.service" ]; then
            sudo cp Deployment/ml-api.service /etc/systemd/system/
            echo "Deployed ml-api.service"
          elif [ -f "ml-api.service" ]; then
            sudo cp ml-api.service /etc/systemd/system/
            echo "Deployed ml-api.service from root"
          else
            echo "WARNING: ml-api.service not found"
          fi
          
          # Deploy nginx configuration
          if [ -f "Deployment/ml-app" ]; then
            sudo cp Deployment/ml-app /etc/nginx/sites-available/
            echo "Deployed nginx config"
          elif [ -f "ml-app" ]; then
            sudo cp ml-app /etc/nginx/sites-available/
            echo "Deployed nginx config from root"
          else
            echo "WARNING: nginx config not found"
          fi

          # Test nginx configuration
          sudo nginx -t
          
          # Reload systemd and enable services
          sudo systemctl daemon-reload
          sudo systemctl enable ml-api streamlit-app

          # copy model

          # If services don't exist yet, start them. Otherwise restart.
          if ! systemctl is-active --quiet ml-api; then
            sudo systemctl start ml-api
          else
            sudo systemctl restart ml-api
          fi
          
          if ! systemctl is-active --quiet streamlit-app; then
            sudo systemctl start streamlit-app
          else
            sudo systemctl restart streamlit-app
          fi

          # Restart nginx
          sudo systemctl restart nginx

          # Health checks 
          echo "Performing health checks..."
          sleep 10
          
          # Check Streamlit
          if curl -f http://localhost:8501; then
            echo "Streamlit health check passed"
          else
            echo "Streamlit health check failed"
          fi
          
          # Check FastAPI
          if curl -f http://localhost:8000/health; then
            echo "API health check passed"
          else
            echo "API health check failed"
          fi
          
          # Final status check
          echo "Service status:"
          sudo systemctl status ml-api --no-pager -l
          sudo systemctl status streamlit-app --no-pager -l
          sudo systemctl status nginx --no-pager -l
