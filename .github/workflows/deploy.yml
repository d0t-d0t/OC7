name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  SERVICE_NAME: ml-pipeline

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pylint black
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v
    
    - name: Lint code
      run: |
        python -m black . --check
        python -m pylint api/ app.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t $SERVICE_NAME:latest .
    
    - name: Save Docker image
      run: |
        docker save -o $SERVICE_NAME.tar $SERVICE_NAME:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu
          
          # Stop existing services
          sudo systemctl stop ml-api streamlit-app || true
          
          # Create directory structure
          mkdir -p $SERVICE_NAME
          
          # Deploy new version
          echo "Deploying new version..."
          
          # Use Docker approach or direct Python deployment
          if [ -f "docker-compose.yml" ]; then
            docker-compose down
            docker-compose up -d
          else
            # Python direct deployment
            if [ -d "$SERVICE_NAME" ]; then
              rm -rf $SERVICE_NAME
            fi
            mkdir -p $SERVICE_NAME
          
          # The rest of the deployment will be handled by the sync below
          
    - name: Sync files to EC2
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -avzr --delete
        path: ./
        remote_path: /home/ubuntu/$SERVICE_NAME/
        remote_host: ${{ secrets.EC2_INSTANCE_IP }}
        remote_user: ubuntu
        remote_key: ${{ secrets.EC2_SSH_KEY }}
    
    - name: Setup and restart services on EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/$SERVICE_NAME
          
          # Create virtual environment
          python3 -m venv venv
          source venv/bin/activate
          
          # Install dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Setup systemd services
          sudo cp .github/systemd/* /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable ml-api streamlit-app
          sudo systemctl restart ml-api streamlit-app nginx
          
          # Health check
          echo "Performing health checks..."
          sleep 10
          curl -f http://localhost:8501 || exit 1
          curl -f http://localhost:8000/docs || exit 1
